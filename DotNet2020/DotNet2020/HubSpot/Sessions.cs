using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net.Http;
using Newtonsoft.Json;


namespace DotNet2020.HubSpot
{
    /*
        You're in charge of implementing a new analytics "sessions" view. 
        You're given a set of data that consists of individual web page visits, 
        along with a visitorId which is generated by a tracking cookie that uniquely identifies each visitor. 
        From this data we need to generate a list of sessions for each visitor.

        You can get the raw event data from the dataset API at REDACTED
        The data set looks like this:
        {
          "events": [
            {
              "url": "/pages/a-big-river",
              "visitorId": "d1177368-2310-11e8-9e2a-9b860a0d9039",
              "timestamp": 1512754583000
            },
            {
              "url": "/pages/a-small-dog",
              "visitorId": "d1177368-2310-11e8-9e2a-9b860a0d9039",
              "timestamp": 1512754631000
            },
            {
              "url": "/pages/a-big-talk",
              "visitorId": "f877b96c-9969-4abc-bbe2-54b17d030f8b",
              "timestamp": 1512709065294
            },
            {
              "url": "/pages/a-sad-story",
              "visitorId": "f877b96c-9969-4abc-bbe2-54b17d030f8b",
              "timestamp": 1512711000000
            },
            {
              "url": "/pages/a-big-river",
              "visitorId": "d1177368-2310-11e8-9e2a-9b860a0d9039",
              "timestamp": 1512754436000
            },
            {
              "url": "/pages/a-sad-story",
              "visitorId": "f877b96c-9969-4abc-bbe2-54b17d030f8b",
              "timestamp": 1512709024000
            }
          ]
        }
        Given this input data, we want to create a set of sessions of the incoming data. 
        A sessions is defined as a group of events from a single visitor with no more than 10 minutes between each event. A visitor can have multiple sessions.

        So given the example input data above, we would expect output which looks like:
        {
        "sessionsByUser": {
          "f877b96c-9969-4abc-bbe2-54b17d030f8b": [
            {
              "duration": 41294,
              "pages": [
                "/pages/a-sad-story",
                "/pages/a-big-talk"
              ],
              "startTime": 1512709024000
            },
            {
              "duration": 0,
              "pages": [
                "/pages/a-sad-story"
              ],
              "startTime": 1512711000000
            }
          ],
          "d1177368-2310-11e8-9e2a-9b860a0d9039": [
            {
              "duration": 195000,
              "pages": [
                "/pages/a-big-river",
                "/pages/a-big-river",
                "/pages/a-small-dog"
              ],
              "startTime": 1512754436000
            }
          ]
        }
        }
        Once the event data has been transformed into session, you will need to send the result via an http POST to REDACTED

        Notes
        Timestamps are in milliseconds.
        Events may not be given in chronological order.
        The visitors in sessionsByUser can be in any order.
        For each visitor, sessions to be in chronological order.
        For each session, the URLs should be sorted in chronological order
        For a session with only one event the duration should be zero
        Evaluation
        When you’re done, this page will update with a form to upload your code. We’ll evaluate you based on three things:

        First and foremost, if you complete the project within three hours.
        Next, the time from when you click the start button below to the time you submit a correct solution.
        Finally, the quality of code you submit. We’re looking for simplicity, clarity and readability over cleverness or flexbility.
        We think you should be able to complete this project in a single sitting, so try to allocate a single block if you can.
 */
    public class RequestRoot
    {
        public Event[] Events { get; set; }
    }

    public class ResponseRoot
    {
        public Dictionary<Guid, List<Session>> sessionsByUser { get; set; }
    }

    public class Event
    {
        public string Url { get; set; }
        public Guid VisitorId { get; set; }
        public long TimeStamp { get; set; }
    }

    public class Session
    {
        public long duration { get; set; }
        public List<string> pages { get; set; }
        public long startTime { get; set; }
    }

    public class Sessions
    {
        public string FindSessions(string input)
        {
            var requestRoot = JsonConvert.DeserializeObject<RequestRoot>(input);
            var eventsMap = requestRoot.Events.GroupBy(e => e.VisitorId).ToDictionary(key => key.Key, value => value.OrderBy(v => v.TimeStamp).ToList());
            //10 minutes
            const int interval = 600000;
            var result = new Dictionary<Guid, List<Session>>();
            foreach (var e in eventsMap)
            {
                // initialize
                if (!result.ContainsKey(e.Key))
                    result[e.Key] = new List<Session>{ new Session
                    {
                        duration = 0,
                        pages = new List<string>(),
                        startTime = 0
                    } };

                var start = e.Value[0].TimeStamp;
                foreach (var session in e.Value)
                {
                    if (session.TimeStamp - start <= interval)
                    {
                        // current session
                        result[e.Key].Last().duration = session.TimeStamp - start;
                        result[e.Key].Last().pages.Add(session.Url);
                        result[e.Key].Last().startTime = start;
                    }
                    else
                    {
                        // new session
                        start = session.TimeStamp;
                        result[e.Key].Add(new Session
                        {
                            duration = 0,
                            pages = new List<string> { session.Url },
                            startTime = session.TimeStamp
                        });
                    }
                }
            }
            return JsonConvert.SerializeObject(new ResponseRoot
            {
                sessionsByUser = result
            });
        }
    }

    public class HttpUtil
    {
        public HttpUtil(HttpClient client)
        {
            _client = client;
        }

        protected HttpClient _client { get; }

        public Task<HttpResponseMessage> GetAsync(string requestUri)
        {
            return GetAsync(new Uri(requestUri));
        }

        public Task<HttpResponseMessage> GetAsync(Uri requestUri)
        {
            return Send(HttpMethod.Get, requestUri);
        }

        public async Task<HttpResponseMessage> PostAsJsonAsync<T>(string requestUri, T body)
        {
            var stringContent = new StringContent(JsonConvert.SerializeObject(body), Encoding.UTF8, "application/json");
            return await _client.PostAsync(requestUri, stringContent);
        }

        private async Task<HttpResponseMessage> Send(HttpMethod verb, Uri requestUri)
        {
            HttpResponseMessage httpResponseMessage;
            using (var request = new HttpRequestMessage(verb, requestUri))
            {
                httpResponseMessage = await _client.SendAsync(request);
            }
            return httpResponseMessage;
        }
    }
}

